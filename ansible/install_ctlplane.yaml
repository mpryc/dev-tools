---
- hosts: localhost
  vars_files: vars/default.yaml
  roles:
  - oc_local

  tasks:
  - set_fact:
      ctlplane_yaml_dir: "{{ working_yamls_dir }}/ctlplane"

  - debug:
      msg: "yamls will be written to {{ ctlplane_yaml_dir }} locally"

  - name: Create yaml dir
    file:
      path: "{{ ctlplane_yaml_dir }}"
      state: directory

  - name: Copy files to yaml dir
    copy:
      src: "{{ item }}"
      dest: "{{ ctlplane_yaml_dir }}/"
    with_fileglob:
    - "ocp/ctlplane/*"

  - name: Start ctlplane
    shell: |
      set -e
      oc apply -n openstack -f "{{ ctlplane_yaml_dir }}"
    environment: &oc_env
      PATH: "{{ oc_env_path }}"
      KUBECONFIG: "{{ kubeconfig }}"

  - name: Wait for mariadb pod creation
    shell: |
      oc get -n openstack pod/mariadb
    environment:
      <<: *oc_env
    register: mariadb_pod_creation
    until: mariadb_pod_creation is not failed
    retries: "{{ (default_timeout / 5)|int }}"
    delay: 5

  - name: Wait for mariadb deployment
    shell: |
      oc wait -n openstack pod/mariadb --for condition=ready --timeout={{ default_timeout }}s
    environment:
      <<: *oc_env

  - name: Wait for keystone deployment to be created
    shell: |
      oc get -n openstack deployment/keystone
    environment:
      <<: *oc_env
    register: keystone_deployment_creation
    until: keystone_deployment_creation is not failed
    retries: "{{ (default_timeout / 5)|int }}"
    delay: 5

  - name: Wait for keystone deployment
    shell: |
      oc wait -n openstack deployment/keystone --for condition=Available \
          --timeout={{ default_timeout }}s
    environment:
      <<: *oc_env

  # This workaround can be removed when
  # https://issues.redhat.com/browse/OSPK8-248 is resolved.
  - name: Wait for keystone bootstrap
    shell: |
      set -e -o pipefail

      oc get -n openstack keystoneapi/keystone -o json | jq -re '.status.bootstrapHash'
    environment:
      <<: *oc_env
    register: keystone_bootstrap
    until: keystone_bootstrap is not failed and keystone_bootstrap.stdout != ""
    retries: "{{ (default_timeout / 5)|int }}"
    delay: 5
